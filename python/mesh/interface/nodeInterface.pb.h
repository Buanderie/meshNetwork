// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodeInterface.proto

#ifndef PROTOBUF_nodeInterface_2eproto__INCLUDED
#define PROTOBUF_nodeInterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nodeInterface {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nodeInterface_2eproto();
void protobuf_AssignDesc_nodeInterface_2eproto();
void protobuf_ShutdownFile_nodeInterface_2eproto();

class Command;
class NodeThreadMsg;

enum NodeThreadMsg_NodeMsgType {
  NodeThreadMsg_NodeMsgType_NODE = 0,
  NodeThreadMsg_NodeMsgType_COMM = 1,
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodeThreadMsg_NodeMsgType_IsValid(int value);
const NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MIN = NodeThreadMsg_NodeMsgType_NODE;
const NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MAX = NodeThreadMsg_NodeMsgType_COMM;
const int NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE = NodeThreadMsg_NodeMsgType_NodeMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeThreadMsg_NodeMsgType_descriptor();
inline const ::std::string& NodeThreadMsg_NodeMsgType_Name(NodeThreadMsg_NodeMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeThreadMsg_NodeMsgType_descriptor(), value);
}
inline bool NodeThreadMsg_NodeMsgType_Parse(
    const ::std::string& name, NodeThreadMsg_NodeMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeThreadMsg_NodeMsgType>(
    NodeThreadMsg_NodeMsgType_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  inline Command* New() const { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float txInterval = 1;
  void clear_txinterval();
  static const int kTxIntervalFieldNumber = 1;
  float txinterval() const;
  void set_txinterval(float value);

  // optional bytes msgBytes = 2;
  void clear_msgbytes();
  static const int kMsgBytesFieldNumber = 2;
  const ::std::string& msgbytes() const;
  void set_msgbytes(const ::std::string& value);
  void set_msgbytes(const char* value);
  void set_msgbytes(const void* value, size_t size);
  ::std::string* mutable_msgbytes();
  ::std::string* release_msgbytes();
  void set_allocated_msgbytes(::std::string* msgbytes);

  // @@protoc_insertion_point(class_scope:nodeInterface.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msgbytes_;
  float txinterval_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nodeInterface_2eproto();
  friend void protobuf_AssignDesc_nodeInterface_2eproto();
  friend void protobuf_ShutdownFile_nodeInterface_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class NodeThreadMsg : public ::google::protobuf::Message {
 public:
  NodeThreadMsg();
  virtual ~NodeThreadMsg();

  NodeThreadMsg(const NodeThreadMsg& from);

  inline NodeThreadMsg& operator=(const NodeThreadMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeThreadMsg& default_instance();

  void Swap(NodeThreadMsg* other);

  // implements Message ----------------------------------------------

  inline NodeThreadMsg* New() const { return New(NULL); }

  NodeThreadMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeThreadMsg& from);
  void MergeFrom(const NodeThreadMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeThreadMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NodeThreadMsg_NodeMsgType NodeMsgType;
  static const NodeMsgType NODE = NodeThreadMsg_NodeMsgType_NODE;
  static const NodeMsgType COMM = NodeThreadMsg_NodeMsgType_COMM;
  static inline bool NodeMsgType_IsValid(int value) {
    return NodeThreadMsg_NodeMsgType_IsValid(value);
  }
  static const NodeMsgType NodeMsgType_MIN =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MIN;
  static const NodeMsgType NodeMsgType_MAX =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MAX;
  static const int NodeMsgType_ARRAYSIZE =
    NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeMsgType_descriptor() {
    return NodeThreadMsg_NodeMsgType_descriptor();
  }
  static inline const ::std::string& NodeMsgType_Name(NodeMsgType value) {
    return NodeThreadMsg_NodeMsgType_Name(value);
  }
  static inline bool NodeMsgType_Parse(const ::std::string& name,
      NodeMsgType* value) {
    return NodeThreadMsg_NodeMsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::nodeInterface::NodeThreadMsg_NodeMsgType type() const;
  void set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value);

  // optional double timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // repeated bytes cmdRelay = 3;
  int cmdrelay_size() const;
  void clear_cmdrelay();
  static const int kCmdRelayFieldNumber = 3;
  const ::std::string& cmdrelay(int index) const;
  ::std::string* mutable_cmdrelay(int index);
  void set_cmdrelay(int index, const ::std::string& value);
  void set_cmdrelay(int index, const char* value);
  void set_cmdrelay(int index, const void* value, size_t size);
  ::std::string* add_cmdrelay();
  void add_cmdrelay(const ::std::string& value);
  void add_cmdrelay(const char* value);
  void add_cmdrelay(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cmdrelay() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmdrelay();

  // repeated .nodeInterface.Command cmds = 4;
  int cmds_size() const;
  void clear_cmds();
  static const int kCmdsFieldNumber = 4;
  const ::nodeInterface::Command& cmds(int index) const;
  ::nodeInterface::Command* mutable_cmds(int index);
  ::nodeInterface::Command* add_cmds();
  ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >*
      mutable_cmds();
  const ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >&
      cmds() const;

  // optional bytes rcvdBytes = 5;
  void clear_rcvdbytes();
  static const int kRcvdBytesFieldNumber = 5;
  const ::std::string& rcvdbytes() const;
  void set_rcvdbytes(const ::std::string& value);
  void set_rcvdbytes(const char* value);
  void set_rcvdbytes(const void* value, size_t size);
  ::std::string* mutable_rcvdbytes();
  ::std::string* release_rcvdbytes();
  void set_allocated_rcvdbytes(::std::string* rcvdbytes);

  // optional bytes dataBlock = 6;
  void clear_datablock();
  static const int kDataBlockFieldNumber = 6;
  const ::std::string& datablock() const;
  void set_datablock(const ::std::string& value);
  void set_datablock(const char* value);
  void set_datablock(const void* value, size_t size);
  ::std::string* mutable_datablock();
  ::std::string* release_datablock();
  void set_allocated_datablock(::std::string* datablock);

  // @@protoc_insertion_point(class_scope:nodeInterface.NodeThreadMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double timestamp_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmdrelay_;
  ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command > cmds_;
  ::google::protobuf::internal::ArenaStringPtr rcvdbytes_;
  ::google::protobuf::internal::ArenaStringPtr datablock_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nodeInterface_2eproto();
  friend void protobuf_AssignDesc_nodeInterface_2eproto();
  friend void protobuf_ShutdownFile_nodeInterface_2eproto();

  void InitAsDefaultInstance();
  static NodeThreadMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional float txInterval = 1;
inline void Command::clear_txinterval() {
  txinterval_ = 0;
}
inline float Command::txinterval() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.txInterval)
  return txinterval_;
}
inline void Command::set_txinterval(float value) {
  
  txinterval_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.Command.txInterval)
}

// optional bytes msgBytes = 2;
inline void Command::clear_msgbytes() {
  msgbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::msgbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.msgBytes)
  return msgbytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_msgbytes(const ::std::string& value) {
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.Command.msgBytes)
}
inline void Command::set_msgbytes(const char* value) {
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.Command.msgBytes)
}
inline void Command::set_msgbytes(const void* value, size_t size) {
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.Command.msgBytes)
}
inline ::std::string* Command::mutable_msgbytes() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.Command.msgBytes)
  return msgbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_msgbytes() {
  
  return msgbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_msgbytes(::std::string* msgbytes) {
  if (msgbytes != NULL) {
    
  } else {
    
  }
  msgbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgbytes);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.Command.msgBytes)
}

// -------------------------------------------------------------------

// NodeThreadMsg

// optional .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
inline void NodeThreadMsg::clear_type() {
  type_ = 0;
}
inline ::nodeInterface::NodeThreadMsg_NodeMsgType NodeThreadMsg::type() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.type)
  return static_cast< ::nodeInterface::NodeThreadMsg_NodeMsgType >(type_);
}
inline void NodeThreadMsg::set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.type)
}

// optional double timestamp = 2;
inline void NodeThreadMsg::clear_timestamp() {
  timestamp_ = 0;
}
inline double NodeThreadMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.timestamp)
  return timestamp_;
}
inline void NodeThreadMsg::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.timestamp)
}

// repeated bytes cmdRelay = 3;
inline int NodeThreadMsg::cmdrelay_size() const {
  return cmdrelay_.size();
}
inline void NodeThreadMsg::clear_cmdrelay() {
  cmdrelay_.Clear();
}
inline const ::std::string& NodeThreadMsg::cmdrelay(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_.Get(index);
}
inline ::std::string* NodeThreadMsg::mutable_cmdrelay(int index) {
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_.Mutable(index);
}
inline void NodeThreadMsg::set_cmdrelay(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.cmdRelay)
  cmdrelay_.Mutable(index)->assign(value);
}
inline void NodeThreadMsg::set_cmdrelay(int index, const char* value) {
  cmdrelay_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline void NodeThreadMsg::set_cmdrelay(int index, const void* value, size_t size) {
  cmdrelay_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline ::std::string* NodeThreadMsg::add_cmdrelay() {
  return cmdrelay_.Add();
}
inline void NodeThreadMsg::add_cmdrelay(const ::std::string& value) {
  cmdrelay_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline void NodeThreadMsg::add_cmdrelay(const char* value) {
  cmdrelay_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline void NodeThreadMsg::add_cmdrelay(const void* value, size_t size) {
  cmdrelay_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeThreadMsg::cmdrelay() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeThreadMsg::mutable_cmdrelay() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.cmdRelay)
  return &cmdrelay_;
}

// repeated .nodeInterface.Command cmds = 4;
inline int NodeThreadMsg::cmds_size() const {
  return cmds_.size();
}
inline void NodeThreadMsg::clear_cmds() {
  cmds_.Clear();
}
inline const ::nodeInterface::Command& NodeThreadMsg::cmds(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Get(index);
}
inline ::nodeInterface::Command* NodeThreadMsg::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Mutable(index);
}
inline ::nodeInterface::Command* NodeThreadMsg::add_cmds() {
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >*
NodeThreadMsg::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.cmds)
  return &cmds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >&
NodeThreadMsg::cmds() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.cmds)
  return cmds_;
}

// optional bytes rcvdBytes = 5;
inline void NodeThreadMsg::clear_rcvdbytes() {
  rcvdbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeThreadMsg::rcvdbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.rcvdBytes)
  return rcvdbytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_rcvdbytes(const ::std::string& value) {
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline void NodeThreadMsg::set_rcvdbytes(const char* value) {
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline void NodeThreadMsg::set_rcvdbytes(const void* value, size_t size) {
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline ::std::string* NodeThreadMsg::mutable_rcvdbytes() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.rcvdBytes)
  return rcvdbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeThreadMsg::release_rcvdbytes() {
  
  return rcvdbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_allocated_rcvdbytes(::std::string* rcvdbytes) {
  if (rcvdbytes != NULL) {
    
  } else {
    
  }
  rcvdbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rcvdbytes);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.rcvdBytes)
}

// optional bytes dataBlock = 6;
inline void NodeThreadMsg::clear_datablock() {
  datablock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeThreadMsg::datablock() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.dataBlock)
  return datablock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_datablock(const ::std::string& value) {
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.dataBlock)
}
inline void NodeThreadMsg::set_datablock(const char* value) {
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.dataBlock)
}
inline void NodeThreadMsg::set_datablock(const void* value, size_t size) {
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.dataBlock)
}
inline ::std::string* NodeThreadMsg::mutable_datablock() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.dataBlock)
  return datablock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeThreadMsg::release_datablock() {
  
  return datablock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_allocated_datablock(::std::string* datablock) {
  if (datablock != NULL) {
    
  } else {
    
  }
  datablock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datablock);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.dataBlock)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nodeInterface

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nodeInterface::NodeThreadMsg_NodeMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nodeInterface::NodeThreadMsg_NodeMsgType>() {
  return ::nodeInterface::NodeThreadMsg_NodeMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nodeInterface_2eproto__INCLUDED
